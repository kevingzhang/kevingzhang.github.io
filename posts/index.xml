<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Kevin Zhang - the Sweeper Monk</title>
    <link>https://kevingzhang.github.io/posts/</link>
    <description>Recent content in Posts on Kevin Zhang - the Sweeper Monk</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 31 Jan 2020 20:22:55 -0800</lastBuildDate>
    
	<atom:link href="https://kevingzhang.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Possible improvement for Dgraph Badger encryption at rest</title>
      <link>https://kevingzhang.github.io/posts/improve-badgedb-security/</link>
      <pubDate>Fri, 31 Jan 2020 20:22:55 -0800</pubDate>
      
      <guid>https://kevingzhang.github.io/posts/improve-badgedb-security/</guid>
      <description>How Badge DB protect data at rest This is how Badge DB protect client&amp;rsquo;s data at rest, I copied from Dgraph blog https://blog.dgraph.io/post/releasing-badger-v2/
 With a key focus on security, Badger now provides an option to encrypt its data! To use encryption, you need to provide Badger an encryption key using the Options.WithEncryptionKey API. Badger uses a different key to encrypt the data, these are called data keys, and they are auto-generated.</description>
    </item>
    
    <item>
      <title>Just Had My Longest Vacation and Back to Work</title>
      <link>https://kevingzhang.github.io/posts/just-had-my-longest-vacation/</link>
      <pubDate>Tue, 28 Jan 2020 15:07:43 -0800</pubDate>
      
      <guid>https://kevingzhang.github.io/posts/just-had-my-longest-vacation/</guid>
      <description>I did not update my blog for a month. Where did I go? I just had my longest vacation since my first job. I went to Florida and Bamahas Islands cruise vacation with my family. After that, I went to the Arizona desert for a camping trip with my RV group members. It took me about a month in total. I never had such an extended vacation in my whole life because I have never been laid off.</description>
    </item>
    
    <item>
      <title>Leave Your Data There, I Will Send My App Over</title>
      <link>https://kevingzhang.github.io/posts/leave-your-data-there/</link>
      <pubDate>Tue, 28 Jan 2020 13:47:50 -0800</pubDate>
      
      <guid>https://kevingzhang.github.io/posts/leave-your-data-there/</guid>
      <description>Today&amp;rsquo;s cloud computing cannot handle tomorrow&amp;rsquo;s use cases Computation involves data being processed by an algorithm.
Today, cloud computing makes a compelling environment for data processing, in which we will typically deploy our code to a service provider&amp;rsquo;s data center and also upload our data to servers of the same data center.
There are cases that the above common practice won&amp;rsquo;t work.
 National data residency requirements prohibit sending the data to another country where the cloud computing node resides.</description>
    </item>
    
    <item>
      <title>Ipfs Miners Add Compute Power</title>
      <link>https://kevingzhang.github.io/posts/ipfs-miners-add-compute-power/</link>
      <pubDate>Wed, 18 Dec 2019 21:24:15 -0800</pubDate>
      
      <guid>https://kevingzhang.github.io/posts/ipfs-miners-add-compute-power/</guid>
      <description>What a wonderful decentralized storage world IPFS (and other similar projects on the decentralized storage market) provides us a new way of thinking on storage. Instead of storing everything in a centralized location, why do not we make multiple copies and distributed to millions of nodes all over the world? The user can get one copy from any of them based on the network distance or bandwidth. This could become the largest CDN system in the world under the economic incentive model to IPFS miners.</description>
    </item>
    
    <item>
      <title>Trustless Serverless Dapp</title>
      <link>https://kevingzhang.github.io/posts/trustless-serverless-dapp/</link>
      <pubDate>Tue, 17 Dec 2019 10:11:41 -0800</pubDate>
      
      <guid>https://kevingzhang.github.io/posts/trustless-serverless-dapp/</guid>
      <description>Do not expect dApp is ready today, there are missing pieces TCP/IP was invented around the 1970s, Database 1980, but web app and mobile internet become popular around 2000. It takes about 30 years. Bitcoin was invented in 2009 which is so far the most popular blockchain application, There is no way for us to expect decentralized apps to get popular within 10 years? It will take some time to get all the pieces in the tech stack to get invented.</description>
    </item>
    
    <item>
      <title>VRF Task Management and Consensus</title>
      <link>https://kevingzhang.github.io/posts/vrf-task-competing/</link>
      <pubDate>Mon, 16 Dec 2019 16:31:59 -0800</pubDate>
      
      <guid>https://kevingzhang.github.io/posts/vrf-task-competing/</guid>
      <description>I listed several principles in my previous post. Let&amp;rsquo;s discuss them one by one.
How blockchain solve this kind of issue? BTC and other Blockchain projects gave us a good example of using randomness. BTC uses the PoW (Proof of Work) consensus to generate the randomness. No one can predict which miner will win the next block in the hash power competition. An attacker has to own more than 51% hash power to attack the BTC network, which means the attack cost is super high.</description>
    </item>
    
    <item>
      <title>Existing Centralized Trust Solution</title>
      <link>https://kevingzhang.github.io/posts/existing-centralzied-trust/</link>
      <pubDate>Mon, 16 Dec 2019 13:37:29 -0800</pubDate>
      
      <guid>https://kevingzhang.github.io/posts/existing-centralzied-trust/</guid>
      <description>Although we generally do not trust a machine in the middle of nowhere, in most cases we still use them, every day, every minute, every second. Cloud computing is one example. Nowadays most of the computing is happening in the data center of cloud computing providers, such as Amazon, Google, Microsoft, and others. We trust them because they are big names, and we trust them because we know they spend tons of resources to keep our data secure.</description>
    </item>
    
    <item>
      <title>Secure your data at rest, in transmit, and more difficult, in use</title>
      <link>https://kevingzhang.github.io/posts/secure-data/</link>
      <pubDate>Sun, 15 Dec 2019 22:12:49 -0800</pubDate>
      
      <guid>https://kevingzhang.github.io/posts/secure-data/</guid>
      <description>When we talking about secure our data, we actually mean three different stages of a data&amp;rsquo;s life.
Data at rest: When data is sleeping in someone&amp;rsquo;s hard drive. Data in transit: Data is transferred between two trusted domains. eg. from a database server to compute node, or from your browser to a server. Data in use: Data is calculated inside a machine (RAM and CPU) Data in transit problem has been resolved by cryptography, such as https have been widely used.</description>
    </item>
    
    <item>
      <title>First time blogging after six years</title>
      <link>https://kevingzhang.github.io/posts/my-first-post/</link>
      <pubDate>Sun, 15 Dec 2019 20:58:49 -0800</pubDate>
      
      <guid>https://kevingzhang.github.io/posts/my-first-post/</guid>
      <description>I have not written any blog since 2013. Yes, I did write blogs, a long time ago. It was in the year 2005 when my daughter Emma was born. That was also the year my family and I immigrated to Canada. I wrote blogs almost every day about my everyday life as a new immigrant from an eastern country. There are too many things to be written to remember since not everyone has the chance to have the 2nd life - first 35 years living in the eastern world and the rest N (N =?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kevingzhang.github.io/posts/temp_notes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kevingzhang.github.io/posts/temp_notes/</guid>
      <description>IPFS vs traditional web IPFS tell your what to look for, but traffitional web do where to look for.
In traditional web, if the server you access is comprimised, you probably get a modified verison of the content you are looking for. In most cases, the modified version contains trojan or virus.
In IPFS, it won&amp;rsquo;t happen. You can verify the hash.
From https://blog.cloudflare.com/distributed-web-gateway/</description>
    </item>
    
  </channel>
</rss>